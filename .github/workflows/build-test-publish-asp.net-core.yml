name: Build, Test, and Publish ASP.NET Core Application

# Trigger when a tag following the "v*.*.*" format is created (semantic versioning)
on:
  push:
    tags:
      - "v[0-9]+\.[0-9]+\.[0-9]+"

env: 
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_VERSION: '8.0.x'

jobs:
  # Linux based builds
  linux-build:
    runs-on: ubuntu-latest
    # Scopes not defined are set to None as long as one scope is manually set here
    permissions:
        contents: read # Allow checkout action to get the repo code
    strategy:
      matrix:
        platform: [linux-arm, linux-arm64, linux-x64]  # Building project for ARM32, ARM64, and x64 (renamed to AMD64)

    steps:
        # Copy the repo code from the tag that triggered this action.
      - name: Checkout tag
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        run: dotnet restore --runtime ${{ matrix.platform }}

      - name: Run code tests
        run: dotnet test --configuration Release --no-build --verbosity normal --runtime ${{ matrix.platform }}

      - name: Publish project as ${{ matrix.platform }}
        shell: bash
        run: |
          # Get the tag name v*.*.* and remove the "v"
          VERSION_NUMBER=$(echo $GITHUB_REF_NAME | sed 's/^v//')

          # Workaround for the linux architecture/platform name used by dotnet.
          # Rename the x64 architecture name to it's other name "AMD64". When creating multi-containerized applications, Docker uses "amd64" as the architecture name. 
          BUILD_NAME="${{ matrix.platform }}"
          if [ "$BUILD_NAME" == "linux-x64" ]; then
            BUILD_NAME="linux-amd64"
          fi
          echo "BUILD_NAME=${BUILD_NAME}" >> $GITHUB_ENV  # Set the variable as a environment variable to use inside others steps of the job

          dotnet publish --configuration Release --runtime ${{ matrix.platform }} --self-contained false --no-restore --output ./build/${{ matrix.platform }} /p:Version=$VERSION_NUMBER /p:AssemblyVersion=$VERSION_NUMBER

      - name: Download FFmpeg latest binary
        shell: bash
        run: |
          # Change the binary download url depending of the architecture/platform we are currently building
          URL=""
          if [[ "${{ matrix.platform }}" == "linux-x64" ]]; then
            URL="https://github.com/yt-dlp/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz"
          elif [[ "${{ matrix.platform }}" == "linux-arm64" ]]; then
            URL="https://github.com/yt-dlp/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linuxarm64-gpl.tar.xz"
          fi
          
          # Ensure Url is not empty
          if [[ -n $URL ]]; then
            wget -q --show-progress "${URL}" -O "./FFmpeg.tar.xz"
            # Extract only the 'ffmpeg' and 'ffprop' files from the 'bin' directory to the custom directory.
            # Ignore the 2 first directory inside the tar file using strip-components argument.
            tar -xf FFmpeg.tar.xz --wildcards --no-anchored --strip-components=2 -C "./build/${{ matrix.platform }}" 'bin/ffmpeg' 'bin/ffprobe'
          else
            echo "No FFmpeg binary url was given for ${{ matrix.platform }}."
          fi

      - name: Download yt-dlp latest binary
        shell: bash
        run: |
          # Change the binary download url depending of the architecture/platform we are currently building
          URL="" 
          if [[ "${{ matrix.platform }}" == "linux-x64" ]]; then
            URL="https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_linux"
          elif [[ "${{ matrix.platform }}" == "linux-arm64" ]]; then
            URL="https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_linux_aarch64"
          elif [[ "${{ matrix.platform }}" == "linux-arm" ]]; then
            URL="https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_linux_armv7l"
          fi

          # Ensure Url is not empty
          if [[ -n $URL ]]; then
            wget -q --show-progress "${URL}" -O "./build/${{ matrix.platform }}/yt-dlp"
          else
            echo "No yt-dlp binary url was given for ${{ matrix.platform }}."
          fi

      - name: Upload ${{ matrix.platform }}-build as a artifact
        uses: actions/upload-artifact@v4
        with:
          # Change the Name to the custom build name
          name: ${{ env.BUILD_NAME }}-build
          path: ./build/${{ matrix.platform }}
          # Only keep the artifact up on github for 1 day
          retention-days: 1
          compression-level: 6

  # Windows based builds
  windows-build:
    runs-on: windows-latest 
    needs: linux-build
    if: success() # Ensure that there was no error during any of the needed jobs
    # Scopes not defined are set to None as long as one scope is manually set here
    permissions:
        contents: read # Allow checkout action to get the repo code
    strategy:
      matrix:
        platform: [win-x64, win-x86]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        run: dotnet restore --runtime ${{ matrix.platform }}

      - name: Run code tests
        run: dotnet test --configuration Release --no-build --verbosity normal --runtime ${{ matrix.platform }}

      - name: Publish project as ${{ matrix.platform }}
        shell: pwsh
        run: |
          # Get the tag name v*.*.* and remove the "v"
          $VERSION_NUMBER = $env:GITHUB_REF_NAME -replace '^v', ''
          dotnet publish --configuration Release --runtime ${{ matrix.platform }} --self-contained false --no-restore --output ./build/${{ matrix.platform }} /p:Version=$VERSION_NUMBER /p:AssemblyVersion=$VERSION_NUMBER

      - name: Download FFmpeg latest binary
        shell: pwsh
        run: |
          # Change the binary download url depending of the architecture/platform we are currently building
          $URL = ""
          $MATRIX_PLATFORM = "${{ matrix.platform }}" # Powershell condition require a env variable to work
          if ($MATRIX_PLATFORM -eq "win-x64") {
            $URL = "https://github.com/yt-dlp/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          } elseif ($MATRIX_PLATFORM -eq "win-x86") {
            $URL = "https://github.com/yt-dlp/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win32-gpl.zip"
          }

          # Ensure Url is not empty
          if ($URL -ne "") {
            Invoke-WebRequest -Uri $URL -OutFile "./FFmpeg.zip"
            # Expand the zip file into the ./FFmpeg directory
            Expand-Archive -Path "./FFmpeg.zip" -DestinationPath "./FFmpeg"

            # Get the directory name that contains the 'bin' folder inside ./FFmpeg
            $FFmpegBinFolderPath =  (Get-ChildItem -Path ".\FFmpeg" -Recurse -Filter "bin" -Directory).fullname
            # Move ffmpeg.exe and ffprobe.exe to the final directory
            Move-Item -Path "$FFmpegBinFolderPath/ffmpeg.exe" -Destination "./build/${{ matrix.platform }}/ffmpeg.exe"
            Move-Item -Path "$FFmpegBinFolderPath/ffprobe.exe" -Destination "./build/${{ matrix.platform }}/ffprobe.exe"
          } else {
            Write-Host "No FFmpeg binary url was given for ${{ matrix.platform }}."
          }

      - name: Download yt-dlp latest binary
        shell: pwsh
        run: |
          # Change the binary download url depending of the architecture/platform we are currently building
          $URL = ""
          $MATRIX_PLATFORM = "${{ matrix.platform }}" # Powershell condition require a env variable to work
          if ($MATRIX_PLATFORM -eq "win-x64") {
            $URL = "https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe"
          } elseif ($MATRIX_PLATFORM -eq "win-x86") {
            $URL = "https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_x86.exe"
          }

          # Ensure Url is not empty
          if ($URL -ne "") {
            Invoke-WebRequest -Uri $URL -OutFile "./build/${{ matrix.platform }}/yt-dlp.exe"
          } else {
            Write-Host "No yt-dlp binary url was given for ${{ matrix.platform }}."
          }

      - name: Upload ${{ matrix.platform }}-build as a artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: ./build/${{ matrix.platform }}
          # Only keep the artifact up on github for 1 day
          retention-days: 1
          compression-level: 6

  # Build Docker images and Push to GitHub Packages
  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: [linux-build, windows-build]
    if: success() 
    permissions:
      contents: read  # Allow checkout action to get the repo code
      packages: write  # Allow pushing to GitHub Packages
      actions: read # Allow to fetch the actions API
    env:
      DOCKER_BUILD_RECORD_UPLOAD: false # Do not upload docker/build-push-action logs as artifacts
      DOCKER_PLATFORMS: "linux/amd64,linux/arm64,linux/arm" # Builds to release to Github Packages. Separated by commas
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install jq to parse JSON responses from GitHub API
      - name: Install jq
        run: |
          sudo apt-get install -y jq

      # Fetch all artifacts and download those that start with "linux-" and end with "build-"
      - name: Download all build artifacts starting with "linux-" and ending with '-build'
        run: |
          # Fetch the list of all artifacts for the current workflow using the GitHub API
          # Only keep linux builds.
          artifacts=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            | jq -r '.artifacts[] | select(.name | startswith("linux-") and endswith("-build")) | .name + "|" + .archive_download_url')

          # Ensure build directory exist
          mkdir -p ./build

          echo "Downloading build artifacts..."
          echo "$artifacts" | while IFS='|' read -r artifactName artifactUrl; do
            artifactFilePath="./build/$artifactName.zip"

            # Download the artifact
            echo "Downloading $artifactName..."
            curl -L -o "$artifactFilePath" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$artifactUrl"
            echo "Extracting $artifactName..."
            unzip "$artifactFilePath" -d "./build/$artifactName/"
            echo "Adding execution tag to $artifactName third-party binaries..."
            
            # Ensure all third-party executables have the read and execution tag
            for binaryName in yt-dlp ffmpeg ffprobe; do
              binaryPath="./build/$artifactName/$binaryName"
              if [[ -f "$binaryPath" ]]; then
                echo "Adding read and execution permissions to $binaryName..."
                chmod a+rx "$binaryPath"
              else
                echo "WARNING: $binaryName not found, skipping chmod."
              fi
            done
          done

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Defines global environment variable for the next step
        run: |
          # Get the tag name v*.*.* and remove the "v"
          CURRENT_DOCKER_RELEASE_VERSION_NUMBER=$(echo $GITHUB_REF_NAME | sed 's/^v//')
          CURRENT_DOCKER_RELEASE_VERSION_NUMBER=$(echo "${CURRENT_DOCKER_RELEASE_VERSION_NUMBER}" | tr '[:upper:]' '[:lower:]') # Ensure everything is lowercase
          echo "CURRENT_DOCKER_RELEASE_VERSION_NUMBER=${CURRENT_DOCKER_RELEASE_VERSION_NUMBER}" >> $GITHUB_ENV  # Set the variable as a environment variable

          # Convert repository path to lowercase
          GITHUB_REPOSITORY_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "GITHUB_REPOSITORY_LOWERCASE=${GITHUB_REPOSITORY_LOWERCASE}" >> $GITHUB_ENV # Set the variable as a environment variable

      - name: Build and push Docker image for ${{ matrix.platform }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true  # Push the image to the registry
          tags: ghcr.io/${{ env.GITHUB_REPOSITORY_LOWERCASE }}:${{ env.CURRENT_DOCKER_RELEASE_VERSION_NUMBER }} # ghcr.io/repo-owner/repo-name:v?.?.?
          platforms: ${{ env.DOCKER_PLATFORMS }}
  # Download the "build" job artifact and prepare them for release
  publish-to-release:
    runs-on: ubuntu-latest
    needs: [linux-build,windows-build]
    if: success() # Ensure that there was no error during the "build" job
    # Scopes not defined are set to None as long as one scope is manually set here
    permissions:
      contents: write # This grant the write permission to the job since gh-release need the permission to edit & upload files to releases
      actions: read # Allow to fetch the actions API
    steps:
      # Install jq to parse JSON responses from GitHub API
      - name: Install jq
        run: |
          sudo apt-get install -y jq

      # Fetch all artifacts and download those that end with '-build'
      - name: Download all build artifacts ending with '-build'
        run: |
          # Fetch the list of all artifacts for the current workflow using the GitHub API
          # Only keep those ending with -build.
          artifacts=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
            | jq -r '.artifacts[] | select(.name | endswith("-build")) | .name + "|" + .archive_download_url')

          # Ensure build directory exist
          mkdir -p ./build

          # Create a checksum file
          echo "Creating SHA256 checksum table..."
          echo "## SHA256 Checksum Table" > release-checksum.md
          echo "This table contains the SHA256 hashes for each binary compiled using GitHub Actions." >> release-checksum.md
          echo "| File Name  | SHA256 |" >> release-checksum.md
          echo "|------------|--------|" >> release-checksum.md

          # Download the build artifacts and generate SHA256 hashes
          echo "Downloading build artifacts..."
          echo "$artifacts" | while IFS='|' read -r artifactName artifactUrl; do
            artifactFilePath="./build/$artifactName.zip"
            # Default value for windows builds
            artifactArchiveExtension=".zip"

            # Download the artifact
            echo "Downloading $artifactName..."
            curl -L -o "$artifactFilePath" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$artifactUrl"

            # Check if the artifactName start with "linux-" (the build artifact is for Linux)
            if [[ "$artifactName" == linux-* ]]; then
              echo "Detected $artifactName as a Linux build."
              artifactArchiveExtension=".tar.gz"
              echo "Extracting $artifactName..."
              unzip "$artifactFilePath" -d "./build/$artifactName/"

              echo "Adding execution tag to $artifactName third-party binaries..."
              # Ensure all third-party executables have the read and execution tag
              for binaryName in yt-dlp ffmpeg ffprobe; do
                binaryPath="./build/$artifactName/$binaryName"
                if [[ -f "$binaryPath" ]]; then
                  echo "Adding read and execution permissions to $binaryName..."
                  chmod a+rx "$binaryPath"
                else
                  echo "WARNING: $binaryName not found, skipping chmod."
                fi
              done

              echo "Removing zip archive of $artifactName..."
              rm "$artifactFilePath"
              # Compress the linux build folder into a .tar.gz archive to keep the chmod configuration
              echo "Creating .tar.gz archive of $artifactName..."
              # Tar to Gzip with compression level of 6
              tar -cf - "./build/$artifactName/" | gzip -6 > "./build/$artifactName.tar.gz"
              # Change the artifact file path to the new archive
              artifactFilePath="./build/$artifactName.tar.gz"
            fi
            

            # Generate the SHA256 hash for the artifact
            artifactSHA256=$(shasum -a 256 "$artifactFilePath" | awk '{ print $1 }')
            # Add the artifact name and checksum to the markdown table
            echo "| \`$artifactName.$artifactArchiveExtension\` | \`$artifactSHA256\` |" >> release-checksum.md
          done

          # Fetch yt-dlp and FFmpeg latest version name on github
          yt_dlp_latestReleaseInfo=$(curl -s https://api.github.com/repos/yt-dlp/yt-dlp/releases/latest)
          FFmpeg_latestReleaseInfo=$(curl -s https://api.github.com/repos/yt-dlp/FFmpeg-Builds/releases/latest)

          yt_dlp_version=$(echo $yt_dlp_latestReleaseInfo | jq -r .tag_name)
          # Since FFmpeg release tag name is always "latest" use "name" insead to get the date of the build
          FFmpeg_version=$(echo $FFmpeg_latestReleaseInfo | jq -r .name	)
          yt_dlp_releaseUrl=$(echo $yt_dlp_latestReleaseInfo | jq -r .html_url)
          FFmpeg_releaseUrl=$(echo $FFmpeg_latestReleaseInfo | jq -r .html_url)

          echo "" >> release-checksum.md
          echo "Theses builds include [yt-dlp version]($yt_dlp_releaseUrl) \`$yt_dlp_version\` and [FFmpeg version]($FFmpeg_releaseUrl) \`$FFmpeg_version\`.*" >> release-checksum.md

      # Upload zip to the github release
      - name: Publish build to github release
      # Use a pinned hash as a prevention to repojacking, verify changelogs & latest before updating for security
        uses: softprops/action-gh-release@01570a1f39cb168c169c802c3bceb9e93fb10974 #v2.1.0 pinned hash
        with:
          prerelease: false
          files: | # Publish all zip and tar builds archives to github release
            ./build/*.zip  
            ./build/*.tar.gz
          append_body: true
          body_path: release-checksum.md