name: Build, Test, and Publish ASP.NET Core Application

# Trigger when a tag following the "v*.*.*" format is created (semantic versioning)
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

env: 
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_VERSION: '8.0.x'

jobs:
  # Linux based builds
  linux-build:
    runs-on: ubuntu-latest
    # Scopes not defined are set to None as long as one scope is manually set here
    permissions:
        contents: read # Allow checkout action to get the repo code
    strategy:
      matrix:
        platform: [linux-arm, linux-arm64, linux-x64]  # Building project for ARM32, ARM64, and x64 (renamed to AMD64)

    steps:
        # Copy the repo code from the tag that triggered this action.
      - name: Checkout tag
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        run: dotnet restore --runtime ${{ matrix.platform }}

      - name: Run code tests
        run: dotnet test --configuration Release --no-build --verbosity normal --runtime ${{ matrix.platform }}

      - name: Publish project as ${{ matrix.platform }}
        shell: bash
        run: |
          # Get the tag name v*.*.* and remove the "v"
          VERSION_NUMBER=$(echo $GITHUB_REF_NAME | sed 's/^v//')

          # Workaround for the linux architecture/platform name used by dotnet.
          # Rename the x64 architecture name to it's other name "AMD64". When creating multi-containerized applications, Docker uses "amd64" as the architecture name. We do this for consistency.
          BUILD_NAME="${{ matrix.platform }}"
          if [ "$BUILD_NAME" == "linux-x64" ]; then
            BUILD_NAME="linux-amd64"
          fi
          echo "BUILD_NAME=${BUILD_NAME}" >> $GITHUB_ENV  # Set the variable as a environment variable to use inside others steps of the job

          dotnet publish --configuration Release --runtime ${{ matrix.platform }} --self-contained false --no-restore --output ./build/${{ matrix.platform }} /p:Version=$VERSION_NUMBER /p:AssemblyVersion=$VERSION_NUMBER

      - name: Download latest FFmpeg and yt-dlp
        shell: pwsh
        run: |
          # Will put all files in the "build/$Platform" directory at the current CD (repo root "./" / $GITHUB_WORKSPACE)

          # Set script path
          $ScriptPath = "$env:GITHUB_WORKSPACE/.github/workflows/scripts/download_external_binaries.ps1"
          # Run script
          pwsh -File $ScriptPath -Platform "${{ matrix.platform }}"

      - name: Upload ${{ matrix.platform }}-build as a artifact
        uses: actions/upload-artifact@v4
        with:
          # Change the Name to the custom build name
          name: ${{ env.BUILD_NAME }}-build
          path: ./build/${{ matrix.platform }}
          # Only keep the artifact up on github for 4 day
          retention-days: 4
          compression-level: 6

  # Windows based builds
  windows-build:
    runs-on: windows-latest 
    needs: linux-build
    if: success() # Ensure that there was no error during any of the needed jobs
    # Scopes not defined are set to None as long as one scope is manually set here
    permissions:
        contents: read # Allow checkout action to get the repo code
    strategy:
      matrix:
        platform: [win-x64, win-x86]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        run: dotnet restore --runtime ${{ matrix.platform }}

      - name: Run code tests
        run: dotnet test --configuration Release --no-build --verbosity normal --runtime ${{ matrix.platform }}

      - name: Publish project as ${{ matrix.platform }}
        shell: pwsh
        run: |
          # Get the tag name v*.*.* and remove the "v"
          $VERSION_NUMBER = $env:GITHUB_REF_NAME -replace '^v', ''
          dotnet publish --configuration Release --runtime ${{ matrix.platform }} --self-contained false --no-restore --output ./build/${{ matrix.platform }} /p:Version=$VERSION_NUMBER /p:AssemblyVersion=$VERSION_NUMBER

      - name: Download latest FFmpeg and yt-dlp
        shell: pwsh
        run: |
          # Will put all files in the "build/$Platform" directory at the current CD (repo root "./" / $GITHUB_WORKSPACE)

          # Set script path
          $ScriptPath = "$env:GITHUB_WORKSPACE/.github/workflows/scripts/download_external_binaries.ps1"
          # Run script
          pwsh -File $ScriptPath -Platform "${{ matrix.platform }}"

      - name: Upload ${{ matrix.platform }}-build as a artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: ./build/${{ matrix.platform }}
          # Only keep the artifact up on github for 4 day
          retention-days: 4
          compression-level: 6

  # Build Docker images and Push to GitHub Packages
  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: [linux-build, windows-build]
    if: success() 
    permissions:
      contents: read  # Allow checkout action to get the repo code
      packages: write  # Allow pushing to GitHub Packages
      #actions: read # Allow to fetch the actions API
    env:
      DOCKER_BUILD_RECORD_UPLOAD: false # Do not upload docker/build-push-action logs as artifacts
      DOCKER_PLATFORMS: "linux/amd64,linux/arm64,linux/arm" # Builds to release to Github Packages. Separated by commas
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          # Destination path. CD is $GITHUB_WORKSPACE
          path: "./build-artifacts/"
          # A glob pattern to the artifacts that should be downloaded.
          pattern: "linux-*-build"

      - name: Prepare build artifacts for docker release (chmod)
        shell: pwsh
        run: |
          # Set script path
          $ScriptPath = "$env:GITHUB_WORKSPACE/.github/workflows/scripts/prepare_github_build_artifacts_for_release.ps1"
          # Run script
          pwsh -File $ScriptPath -artifactDir "$env:GITHUB_WORKSPACE/build-artifacts/" -outputDir "./build"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Defines global environment variable for the next step
        run: |
          # Get the tag name v*.*.* and remove the "v"
          CURRENT_DOCKER_RELEASE_VERSION_NUMBER=$(echo $GITHUB_REF_NAME | sed 's/^v//')
          CURRENT_DOCKER_RELEASE_VERSION_NUMBER=$(echo "${CURRENT_DOCKER_RELEASE_VERSION_NUMBER}" | tr '[:upper:]' '[:lower:]') # Ensure everything is lowercase
          echo "CURRENT_DOCKER_RELEASE_VERSION_NUMBER=${CURRENT_DOCKER_RELEASE_VERSION_NUMBER}" >> $GITHUB_ENV  # Set the variable as a environment variable

          # Convert repository path to lowercase
          GITHUB_REPOSITORY_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "GITHUB_REPOSITORY_LOWERCASE=${GITHUB_REPOSITORY_LOWERCASE}" >> $GITHUB_ENV # Set the variable as a environment variable

      - name: Build and push Docker image for ${{ matrix.platform }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true  # Push the image to the registry
          tags: ghcr.io/${{ env.GITHUB_REPOSITORY_LOWERCASE }}:${{ env.CURRENT_DOCKER_RELEASE_VERSION_NUMBER }} # ghcr.io/repo-owner/repo-name:v?.?.?
          platforms: ${{ env.DOCKER_PLATFORMS }}
  # Download the "build" job artifact and prepare them for release
  publish-to-release:
    runs-on: ubuntu-latest
    needs: [linux-build,windows-build]
    if: success() # Ensure that there was no error during the "build" job
    # Scopes not defined are set to None as long as one scope is manually set here
    permissions:
      contents: write # This grant the write permission to the job since gh-release need the permission to edit & upload files to releases
      #actions: read # Allow to fetch the actions API
    steps:
      - uses: actions/download-artifact@v4
        with:
          # Destination path. CD is $GITHUB_WORKSPACE
          path: "./build-artifacts/"
          # A glob pattern to the artifacts that should be downloaded.
          pattern: "*-build"

      - name: Prepare build artifacts for archive release
        shell: pwsh
        run: |
          # Set script path
          $ScriptPath = "$env:GITHUB_WORKSPACE/.github/workflows/scripts/prepare_github_build_artifacts_for_release.ps1"
          # Run script
          #TMP-DEBUG
          ls -f
          pwsh -File $ScriptPath -artifactDir "$env:GITHUB_WORKSPACE/build-artifacts/" -outputDir "./build" -compressOutput

      - name: Generate archives checksum
        shell: pwsh
        run: |
          # Set script path
          $ScriptPath = "$env:GITHUB_WORKSPACE/.github/workflows/scripts/generate-checksum-markdown.ps1"
          # Run script
          pwsh -File $ScriptPath -dirPath "./build" -checksumFileOut "./build/checksum.md"

      # Upload zip to the github release
      - name: Publish build to github release
      # Use a pinned hash as a prevention to repojacking, verify changelogs & latest before updating for security
        uses: softprops/action-gh-release@01570a1f39cb168c169c802c3bceb9e93fb10974 #v2.1.0 pinned hash
        with:
          prerelease: false
          files: | # Publish all zip and tar builds archives to github release
            ./build/*.tar.gz
            ./build/*.zip  
          append_body: true
          body_path: ./build/checksum.md